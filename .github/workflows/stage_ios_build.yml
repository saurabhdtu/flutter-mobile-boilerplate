name: Build and Deploy IPA

on:
  push:
    branches:
      - 'stage-ipa*'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-latest
    environment: stage-ios

    steps:

      # checkout repository code      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 20

      # Fetch last 20 commit messages
      - name: Fetch last 20 commit messages
        id: commit_messages
        run: |
          git log -20
          commits=$(git log -20 --pretty=format:"%h - %s")
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$commits" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo $commits

      # Install certificates and provisioning profile
      # Decode the base 64 certificates and provisioning profile from secrets 
      # Create keychain and store the certificate and certificate password
      # Enable the certificate to be directly accessed by xcode without user prompts
      - name: Decode and Install Certificate & Provisioning Profiles
        run: |
          echo -n "$P12_CERTIFICATE_BASE64" | base64 --decode --output certificate.p12
          echo -n "$PROVISION_PROFILE" | base64 --decode --output $PROVISION_PROFILE_NAME.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/zinc-keychain

          security create-keychain -p zinc-keychain $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p zinc-keychain $KEYCHAIN_PATH
          security import certificate.p12 -k $KEYCHAIN_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -s -k zinc-keychain $KEYCHAIN_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISION_PROFILE_NAME.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles

          security find-identity -p codesigning $KEYCHAIN_PATH

        env:
          PROVISION_PROFILE_NAME: ${{ secrets.PROVISION_PROFILE_NAME }}
          P12_CERTIFICATE_BASE64: ${{ secrets.P12_CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          PROVISION_PROFILE: ${{ secrets.DEV_WORKFLOW_PROVISION_PROFILE }}


      # Fetch last 20 commit messages
      - name: Fetch last 20 commit messages
        id: commit_messages
        run: |
          git log -20
          commits=$(git log -20 --pretty=format:"%h - %s")
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$commits" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo $commits

      # Setup xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: 15.3

      # Setup Flutter SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      # Install Flutter dependencies
      - name: Install dependencies
        run: flutter pub get

      # Run flutter tests
      - name: Run tests
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter test

      # Build iOS code
      - name: Build iOS app
        run: flutter build ios --release --flavor dev --no-codesign
        env:
          FLUTTER_ROOT: ${{ runner.tool_cache }}/flutter
          PUB_CACHE: ${{ runner.tool_cache }}/pub

      # Archive the iOS APP with configuration and scheme 
      - name: Archive iOS App
        run: |
          set -o pipefail && \
          xcodebuild -workspace ios/Runner.xcworkspace \
                     -scheme dev \
                     -configuration Release-dev \
                     -archivePath build/ios/archive/Runner.xcarchive \
                     clean archive

      # Create export options file with provision profile and team ID
      - name: Create Export Options Plist
        env:
          APP_STORE_ID: ${{ secrets.STORE }}
        run: |
          cat <<EOF > ios/exportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>${{ secrets.STORE_TEAM_ID }}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>uploadBitcode</key>
            <false/>
            <key>compileBitcode</key>
            <true/>
            <key>uploadSymbols</key>
            <true/>
            <key>destination</key>
            <string>export</string>
            <key>iCloudContainerEnvironment</key>
            <string>Production</string>
            <key>provisioningProfiles</key>
              <dict>
                <key>com.zinc.money.ios.debug</key> 
                <string>${{ secrets.PROVISION_PROFILE_NAME }}</string> 
              </dict>
          </dict>
          </plist>
          EOF

      # Verifying if the file was properly created
      - name: Verify exportOptions.plist
        run: |
          if [ ! -f ios/exportOptions.plist ]; then
            echo "exportOptions.plist not found!"
            exit 1
          else
            echo "exportOptions.plist created successfully."
          fi

      # Creating the IPA file from archive
      - name: Create IPA file
        run: xcodebuild -exportArchive -archivePath build/ios/archive/Runner.xcarchive -exportOptionsPlist ios/exportOptions.plist -exportPath build/ios/ipa -allowProvisioningUpdates

      # Create private_keys directory
      - name: Create .private_keys directory
        run: mkdir -p ~/.private_keys
        
      # Add auth keys in private_keys directory
      - name: Add AuthKey
        run: echo "$APP_STORE_CONNECT_KEY" > ~/.private_keys/AuthKey_-----BEGIN.p8
        env:
          APP_STORE_CONNECT_KEY: ${{ secrets.STORE_AUTH_KEY }}
      
      # Upload file to testflight
      - name: Upload to TestFlight
        run: |
          /Applications/Xcode.app/Contents/Developer/usr/bin/altool --upload-app -f build/ios/ipa/zinc.ipa -t ios -u ${EMAIL} -p ${PASS} --verbose
        env:
          EMAIL: ${{ secrets.APPLE_EMAIL_ID }}
          PASS: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

      #       We share the update on slack after the build has been shared
      - name: Send slack success notification
        if: success()
        env:
          COMMITS: ${{ env.COMMITS }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          message="New ios App has been uploaded to Testflight. https://shorturl.at/SVhJN \nLast 20 commit messages:\n$COMMITS"
          JSON_PAYLOAD=$(jq -n --arg msg "$message" '{text: $msg}')
          curl --location "https://hooks.slack.com/services/$SLACK_WEBHOOK_URL" \
           --header 'Content-Type: application/json' \
           --data "$JSON_PAYLOAD"
        # Send slack update in case of failure
      - name: Send slack failure notification
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          COMMITS: ${{ env.COMMITS }}
        run: |
          message="Build failed. Check https://github.com/zinc-hub/zinc-flutter/actions for details.\nLast 20 commit messages:$COMMITS"
          JSON_PAYLOAD=$(jq -n --arg msg "$message" '{text: $msg}')
          curl --location "https://hooks.slack.com/services/$SLACK_WEBHOOK_URL" \
          --header 'Content-Type: application/json' \
          --data "$JSON_PAYLOAD"
   