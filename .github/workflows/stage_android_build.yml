name: Build and Deploy APK

on:
  push:
    branches:
      - 'stage-apk*'

jobs:
  build:
    runs-on: ubuntu-latest
    environment: stage-android

    env:
      JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
      ANDROID_SDK_ROOT: /usr/local/android-sdk
      FLUTTER_HOME: /usr/local/flutter

    steps:
      # checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 20

      # Fetch last 20 commit messages
      - name: Fetch last 20 commit messages
        id: commit_messages
        run: |
          git log -20
          commits=$(git log -20 --pretty=format:"%h - %s")
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$commits" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo $commits

      # setup Java SDK
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'
          cache: gradle


      # Setup flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      # Check flutter version and command
      - run: flutter --version

      # Install flutter dependencies
      - name: Install dependencies
        run: flutter pub get

      # Run flutter tests
      - name: Run tests
        run: |
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter test

      # Build release APK
      - name: Build APK
        if: success()
        run: flutter build apk --flavor dev --release

      # Setup google cloud SDK. Required for getting the OAuth2.0
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2.1.0'
        with:
          version: '>= 477.0.0'

      # Configuring project id and the service account json from firebase
      - name: Authenticate with service account
        env:
          SERVICE_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          echo $SERVICE_JSON | jq '.' > "${HOME}/gcloud-service-key.json"
          gcloud auth login --cred-file=${HOME}/gcloud-service-key.json
          gcloud config set project $PROJECT_ID
          gcloud config set account $(gcloud config get-value account)
          gcloud info

      # Getting the access token after gcloud login
      - name: Get OAuth2 Access Token
        run: |
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          echo "Access Token: $ACCESS_TOKEN"
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      # Uploading build to firebase using CURL request
      # The operation returns a json with the operation ID
      # We take out the operation ID from the response and check its status using jq (jquery)
      - name: Upload to Firebase App Distribution
        env:
          WORKSPACE: $GITHUB_WORKSPACE
          FIREBASE_TOKEN: ${{ env.ACCESS_TOKEN }}
          PROJECT_NUMBER: ${{ secrets.FIREBASE_PROJECT_NUMBER }}
          APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: |
          FILE_PATH="$GITHUB_WORKSPACE/build/app/outputs/flutter-apk/app-dev-release.apk"
          if [ -f "$FILE_PATH" ]; then
            echo "File exists: $FILE_PATH"
          else
            echo "File does not exist: $FILE_PATH"
          fi
          echo "Uploading file: $FILE_PATH"
          OPERATION=$(curl -X POST \
          -H "Authorization: Bearer $FIREBASE_TOKEN" \
          -H "X-Goog-Upload-Protocol: raw" \
          -H "X-Goog-Upload-File-Name: app-dev-release.apk" \
          --data-binary @"$FILE_PATH" \
          "https://firebaseappdistribution.googleapis.com/upload/v1/projects/$PROJECT_NUMBER/apps/$APP_ID/releases:upload")
          echo "Operation response: $OPERATION"
          OPERATION_NAME=$(echo $OPERATION | jq -r '.name' | sed 's|^.*releases/||')
          echo "OPERATION_NAME=$OPERATION_NAME" >> $GITHUB_ENV

      # Uploaded files takes some time to process on firebase thus the operation
      # may not produce the result immediately.
      # Polling here 5 times after delay of 5 secs to check the status of the operation till we get Release ID
      # We capture the release ID from the response using jq
      - name: Poll Operation
        id: poll_operation
        env:
          FIREBASE_TOKEN: ${{ env.ACCESS_TOKEN }}
          OPERATION_NAME: ${{ env.OPERATION_NAME }}
          APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          PROJECT_NUMBER: ${{ secrets.FIREBASE_PROJECT_NUMBER }}
        run: |
          for i in {1..5}; do
            RESPONSE=$(curl -X GET \
              -H "Authorization: Bearer $FIREBASE_TOKEN" \
              "https://firebaseappdistribution.googleapis.com/v1/projects/$PROJECT_NUMBER/apps/$APP_ID/releases/$OPERATION_NAME")
            echo "Polling response: $RESPONSE"
            if echo "$RESPONSE" | grep -q '"done": true'; then
              break
            fi
            sleep 5
          done
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.response.release.name' | awk -F/ '{print $NF}')
          echo "Release ID: $RELEASE_ID"
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV


      # Using release id we share the release with the test groups and token
      - name: Distribute APK to Testers
        if: env.RELEASE_ID != ''
        env:
          COMMITS: ${{ env.COMMITS }}
          FIREBASE_TOKEN: ${{ env.ACCESS_TOKEN }}
          APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          TEST_GROUPS: ${{ vars.TEST_GROUPS }}
          PROJECT_NUMBER: ${{ secrets.FIREBASE_PROJECT_NUMBER }}
          RELEASE_ID: ${{ env.RELEASE_ID }}
        run: |
          echo $TEST_GROUPS
          JSON_PAYLOAD=$(jq -n \
            --argjson groups "$TEST_GROUPS" \
            --arg commits "$COMMITS" \
            '{groupAliases: $groups, releaseNotes: {text: $commits}}')
          curl -X POST \
          -H "Authorization: Bearer $FIREBASE_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD" \
          "https://firebaseappdistribution.googleapis.com/v1/projects/$PROJECT_NUMBER/apps/$APP_ID/releases/$RELEASE_ID:distribute"

      - name: Send slack success notification
        if: success()
        env:
          COMMITS: ${{ env.COMMITS }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          message="New APK has been uploaded to Firebase App Distribution. https://shorturl.at/RR0bJ\nLast 20 commit messages:\n$COMMITS"
          JSON_PAYLOAD=$(jq -n --arg msg "$message" '{text: $msg}')
          curl --location "https://hooks.slack.com/services/$SLACK_WEBHOOK_URL" \
           --header 'Content-Type: application/json' \
           --data "$JSON_PAYLOAD"

      - name: Send slack failure notification
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          COMMITS: ${{ env.COMMITS }}
        run: |
          message="Build failed. Check https://github.com/zinc-hub/zinc-flutter/actions for details.\nLast 20 commit messages:$COMMITS"
          JSON_PAYLOAD=$(jq -n --arg msg "$message" '{text: $msg}')
          curl --location "https://hooks.slack.com/services/$SLACK_WEBHOOK_URL" \
          --header 'Content-Type: application/json' \
          --data "$JSON_PAYLOAD"